schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Account {
  email: String
  firstName: String
  lastName: String
  id: ID
  messageThreads: [MessageThreadInfo]
  spotter: Spotter
  university: University
  verified: Boolean
}

enum Activity {
  BIKING
  BODYBUILDING
  CROSS_TRAINING
  INTRAMURAL_SPORTS
  LIFTING
  PILATES
  RUNNING
  SPINNING
  SWIMMING
  TEAM_SPORTS
  YOGA
  ZUMBA
}

input Credentials {
  email: String!
  password: String!
}

# ISO8601 datetime
scalar Datetime

enum Gender {
  FEMALE
  MALE
}

type Message {
  account: Account
  body: String
  id: ID
  insertedAt: Datetime
  messageThread: MessageThread
}

input MessageInput {
  body: String!
  messageThreadId: ID!
}

type MessageThread {
  creator: Account
  id: ID
  lastMessageAt: Datetime
  participants: [Account]
}

type MessageThreadInfo {
  lastMessage: Message
  messageThread: MessageThread
  threadStatus: ThreadStatus
  unreadMessages: Int
}

input MessageThreadInput {
  accountIds: [ID]!
}

type MutatedMessage {
  message: Message
}

type MutatedSpotter {
  spotter: Spotter
}

input PaginationInput {
  fromObjectId: ID
  objectCount: Int
}

type Post {
  body: String
  id: ID
  imageUrl: String
  insertedAt: Datetime
  likeCount: Int
  liked: Boolean
  spotter: Spotter
}

input PostInput {
  body: String!
  encodedImage: String
}

enum PostType {
  ADMIN
  POPULAR
  RECENT
}

type Profile {
  account: Account
}

type RootMutationType {
  blockSpotter(spotterId: ID!): Boolean
  changeMessageThreadStatus(
    messageThreadId: ID!
    threadStatus: ThreadStatus!
  ): Boolean
  createMessage(messageInput: MessageInput!): MutatedMessage
  createPost(postInput: PostInput!): Post
  hidePost(postId: ID!): Boolean
  login(credentials: Credentials!): Session
  register(credentials: Credentials!, spotterInput: SpotterInput!): Session
  reportSpotter(spotterId: ID!): Boolean
  toggleLike(postId: ID!): Boolean
  upsertSpotter(spotterInput: SpotterInput!): MutatedSpotter
  verifyCode(code: String!): Profile
}

type RootQueryType {
  getMessage(messageId: ID!): MutatedMessage
  getMessageThreadFor(accountIds: [ID]!): MessageThreadInfo
  getPostById(id: ID!): Post
  getPosts(filter: PostType!, pagination: PaginationInput!): [Post]
  getProfile(id: ID): Profile
  getSpotterPosts(pagination: PaginationInput, spotterId: ID): [Post]
  getSpotters(
    filter: SpotterFilterInput!
    order: SpotterOrder!
    pagination: PaginationInput!
  ): [Spotter]
  getThreadMessages(
    messageThreadId: ID!
    paginationInput: PaginationInput!
  ): [Message]
}

type Session {
  account: Account
  token: String
}

type Spotter {
  about: String
  account: Account
  activities: [Activity]
  avatarUrl: String
  firstName: String
  gender: Gender
  id: ID
  lastName: String
  profileComplete: Boolean
  timeslots: [Timeslot]
  university: University
}

input SpotterFilter {
  timeslots: [Timeslot]
}

input SpotterFilterInput {
  activities: [Activity]
  name: String
  timeslots: [Timeslot]
}

input SpotterInput {
  about: String
  activities: [Activity]
  encodedImage: String
  firstName: String
  gender: Gender
  lastName: String
  profileComplete: Boolean
  timeslots: [Timeslot]
}

enum SpotterOrder {
  ALPHABET
  SIMILARITY
}

enum ThreadStatus {
  APPROVED
  BLOCKED
  PENDING
}

enum Timeslot {
  AFTERNOON
  EARLY_MORNING
  LATE_NIGHT
  MORNING
  NIGHT
  NO_PREFERENCE
}

type University {
  domain: String
  name: String
}
